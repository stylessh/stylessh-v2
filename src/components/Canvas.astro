<canvas id="gl"></canvas>

<script>
  import * as THREE from "three";
  import { gsap } from "gsap";

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );

  const renderer = new THREE.WebGLRenderer({
    canvas: document.getElementById("gl") as HTMLCanvasElement,
    alpha: true,
  });

  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  document.body.appendChild(renderer.domElement);

  camera.position.y = 0;

  // add fog
  scene.fog = new THREE.Fog(0x111111, 0.1, 5);

  // Lines

  const material = new THREE.LineBasicMaterial({
    color: 0xffffff,
  });

  const points = [];
  points.push(new THREE.Vector3(0, 2, 0));
  points.push(new THREE.Vector3(0, 4, 0));

  const geometry = new THREE.BufferGeometry().setFromPoints(points);

  // render a lot of lines
  for (let i = 0; i < 500; i++) {
    const line = new THREE.Line(geometry, material);
    line.position.x = Math.random() * 10 - 5;
    line.position.y = Math.random() * 10 - 5;
    line.position.z = Math.random() * 10 - 5;

    scene.add(line);
  }

  // Raycaster
  const mouse = new THREE.Vector2();

  function onMouseMove(event: MouseEvent) {
    // calculate mouse position in normalized device coordinates
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    // move the camera with gsap
    gsap.to(camera.position, {
      x: mouse.x * 0.5,
      y: mouse.y * 0.5,

      duration: 0.2,
      ease: "power2.out",
    });
  }

  // fade out canvas on scroll
  function onScroll(e) {
    const scroll = e.delta.y / (e.limit.y + 300);

    gsap.to(renderer.domElement, {
      opacity: 1 - scroll,
      duration: 0.2,
      ease: "power2.out",
    });
  }

  window["locomotiveScroll"].on("scroll", onScroll);

  window.addEventListener("mousemove", onMouseMove, false);

  // animate
  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }

  animate();

  //   window resize
  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
</script>
